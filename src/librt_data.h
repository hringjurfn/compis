// librt source
// SPDX-License-Identifier: Apache-2.0
//
// when upgrading compiler-rt to a new version, perform these manual steps:
// - open lib/builtins/CMakeLists.txt
// - update arrays below

static const char* const librt_src_generic[] = {
  // cmake: GENERIC_SOURCES + GENERIC_TF_SOURCES
  "absvdi2.c",
  "absvsi2.c",
  "absvti2.c",
  "adddf3.c",
  "addsf3.c",
  "addvdi3.c",
  "addvsi3.c",
  "addvti3.c",
  "apple_versioning.c",
  "ashldi3.c",
  "ashlti3.c",
  "ashrdi3.c",
  "ashrti3.c",
  "bswapdi2.c",
  "bswapsi2.c",
  "clzdi2.c",
  "clzsi2.c",
  "clzti2.c",
  "cmpdi2.c",
  "cmpti2.c",
  "comparedf2.c",
  "comparesf2.c",
  "ctzdi2.c",
  "ctzsi2.c",
  "ctzti2.c",
  "divdc3.c",
  "divdf3.c",
  "divdi3.c",
  "divmoddi4.c",
  "divmodsi4.c",
  "divmodti4.c",
  "divsc3.c",
  "divsf3.c",
  "divsi3.c",
  "divti3.c",
  "extendsfdf2.c",
  "extendhfsf2.c",
  "ffsdi2.c",
  "ffssi2.c",
  "ffsti2.c",
  "fixdfdi.c",
  "fixdfsi.c",
  "fixdfti.c",
  "fixsfdi.c",
  "fixsfsi.c",
  "fixsfti.c",
  "fixunsdfdi.c",
  "fixunsdfsi.c",
  "fixunsdfti.c",
  "fixunssfdi.c",
  "fixunssfsi.c",
  "fixunssfti.c",
  "floatdidf.c",
  "floatdisf.c",
  "floatsidf.c",
  "floatsisf.c",
  "floattidf.c",
  "floattisf.c",
  "floatundidf.c",
  "floatundisf.c",
  "floatunsidf.c",
  "floatunsisf.c",
  "floatuntidf.c",
  "floatuntisf.c",
  "fp_mode.c",
  "int_util.c",
  "lshrdi3.c",
  "lshrti3.c",
  "moddi3.c",
  "modsi3.c",
  "modti3.c",
  "muldc3.c",
  "muldf3.c",
  "muldi3.c",
  "mulodi4.c",
  "mulosi4.c",
  "muloti4.c",
  "mulsc3.c",
  "mulsf3.c",
  "multi3.c",
  "mulvdi3.c",
  "mulvsi3.c",
  "mulvti3.c",
  "negdf2.c",
  "negdi2.c",
  "negsf2.c",
  "negti2.c",
  "negvdi2.c",
  "negvsi2.c",
  "negvti2.c",
  "os_version_check.c",
  "paritydi2.c",
  "paritysi2.c",
  "parityti2.c",
  "popcountdi2.c",
  "popcountsi2.c",
  "popcountti2.c",
  "powidf2.c",
  "powisf2.c",
  "subdf3.c",
  "subsf3.c",
  "subvdi3.c",
  "subvsi3.c",
  "subvti3.c",
  "trampoline_setup.c",
  "truncdfhf2.c",
  "truncdfsf2.c",
  "truncsfhf2.c",
  "ucmpdi2.c",
  "ucmpti2.c",
  "udivdi3.c",
  "udivmoddi4.c",
  "udivmodsi4.c",
  "udivmodti4.c",
  "udivsi3.c",
  "udivti3.c",
  "umoddi3.c",
  "umodsi3.c",
  "umodti3.c",
  "addtf3.c",
  "comparetf2.c",
  "divtc3.c",
  "divtf3.c",
  "extenddftf2.c",
  "extendhftf2.c",
  "extendsftf2.c",
  "fixtfdi.c",
  "fixtfsi.c",
  "fixtfti.c",
  "fixunstfdi.c",
  "fixunstfsi.c",
  "fixunstfti.c",
  "floatditf.c",
  "floatsitf.c",
  "floattitf.c",
  "floatunditf.c",
  "floatunsitf.c",
  "floatuntitf.c",
  "multc3.c",
  "multf3.c",
  "powitf2.c",
  "subtf3.c",
  "trunctfdf2.c",
  "trunctfhf2.c",
  "trunctfsf2.c",
  "clear_cache.c",
  // TODO:
  // - if target has __bf16: GENERIC_SOURCES+=( truncdfbf2.c truncsfbf2.c )
  //   e.g. if_compiles($TARGET, "__bf16 f(__bf16 x) { return x; }")
  // - if target has "_Atomic" keyword: GENERIC_SOURCES+=( atomic.c )
  //   e.g. if_compiles($TARGET, "int f(int x,int y) { _Atomic int r = x*y; return r;}")
};
static const char* const librt_src_macos[] = {
  // cmake: if (APPLE)
  "atomic_flag_clear.c",
  "atomic_flag_clear_explicit.c",
  "atomic_flag_test_and_set.c",
  "atomic_flag_test_and_set_explicit.c",
  "atomic_signal_fence.c",
  "atomic_thread_fence.c",
};
static const char* const librt_src_x86[] = {
  "cpu_model.c",
  "i386/fp_mode.c",
};
static const char* const librt_src_i386[] = {
  "i386/ashldi3.S",
  "i386/ashrdi3.S",
  "i386/divdi3.S",
  "i386/floatdidf.S",
  "i386/floatdisf.S",
  "i386/floatundidf.S",
  "i386/floatundisf.S",
  "i386/lshrdi3.S",
  "i386/moddi3.S",
  "i386/muldi3.S",
  "i386/udivdi3.S",
  "i386/umoddi3.S",
  "i386/floatdixf.S",   // cmake: if (NOT ANDROID)
  "i386/floatundixf.S", // cmake: if (NOT ANDROID)
};
static const char* const librt_src_x86_64[] = {
  // note: X86_80_BIT_SOURCES are ignored
  "x86_64/floatdidf.c",
  "x86_64/floatdisf.c",
  "x86_64/floatundidf.S",
  "x86_64/floatundisf.S",
  "x86_64/floatdixf.c",   // cmake: if (NOT ANDROID)
  "x86_64/floatundixf.S", // cmake: if (NOT ANDROID)
};
static const char* const librt_src_aarch64[] = {
  "aarch64/cpu_model.c"
  "aarch64/fp_mode.c"
};
#define librt_src_aarch64_outline_atomic "aarch64/outline_atomic.S.inc"
static const char* const librt_src_arm[] = {
  "arm/fp_mode.c",
  "arm/bswapdi2.S",
  "arm/bswapsi2.S",
  "arm/clzdi2.S",
  "arm/clzsi2.S",
  "arm/comparesf2.S",
  "arm/divmodsi4.S",
  "arm/divsi3.S",
  "arm/modsi3.S",
  "arm/sync_fetch_and_add_4.S",
  "arm/sync_fetch_and_add_8.S",
  "arm/sync_fetch_and_and_4.S",
  "arm/sync_fetch_and_and_8.S",
  "arm/sync_fetch_and_max_4.S",
  "arm/sync_fetch_and_max_8.S",
  "arm/sync_fetch_and_min_4.S",
  "arm/sync_fetch_and_min_8.S",
  "arm/sync_fetch_and_nand_4.S",
  "arm/sync_fetch_and_nand_8.S",
  "arm/sync_fetch_and_or_4.S",
  "arm/sync_fetch_and_or_8.S",
  "arm/sync_fetch_and_sub_4.S",
  "arm/sync_fetch_and_sub_8.S",
  "arm/sync_fetch_and_umax_4.S",
  "arm/sync_fetch_and_umax_8.S",
  "arm/sync_fetch_and_umin_4.S",
  "arm/sync_fetch_and_umin_8.S",
  "arm/sync_fetch_and_xor_4.S",
  "arm/sync_fetch_and_xor_8.S",
  "arm/udivmodsi4.S",
  "arm/udivsi3.S",
  "arm/umodsi3.S",
  // EABI, use if not sys=win32
  "arm/aeabi_cdcmp.S",
  "arm/aeabi_cdcmpeq_check_nan.c",
  "arm/aeabi_cfcmp.S",
  "arm/aeabi_cfcmpeq_check_nan.c",
  "arm/aeabi_dcmp.S",
  "arm/aeabi_div0.c",
  "arm/aeabi_drsub.c",
  "arm/aeabi_fcmp.S",
  "arm/aeabi_frsub.c",
  "arm/aeabi_idivmod.S",
  "arm/aeabi_ldivmod.S",
  "arm/aeabi_memcmp.S",
  "arm/aeabi_memcpy.S",
  "arm/aeabi_memmove.S",
  "arm/aeabi_memset.S",
  "arm/aeabi_uidivmod.S",
  "arm/aeabi_uldivmod.S",
};
static const char* const librt_src_riscv[] = {
  "riscv/save.S",
  "riscv/restore.S",
};
static const char* const librt_src_riscv32[] = {
  "riscv/mulsi3.S",
};
static const char* const librt_src_riscv64[] = {
  "riscv/muldi3.S",
};

// "exclude" filters; function names (basename w/o ext of source files)
// From text files with the following pattern:
//   lib/builtins/Darwin-excludes/OS[-ARCH].txt
// Related cmake files:
// - lib/builtins/Darwin-excludes/CMakeLists.txt
// - cmake/Modules/CompilerRTDarwinUtils.cmake
//   - macro(darwin_add_builtin_libraries)
//   - function(darwin_find_excluded_builtins_list output_var)
static const char* const librt_src_exclude_macos[] = {
  // lib/builtins/Darwin-excludes/osx.txt
  "apple_versioning",
  "addtf3",
  "divtf3",
  "multf3",
  "powitf2",
  "subtf3",
  "trampoline_setup",
};
