//import "std/runtime" { print }

// type Bad<X,Y=int,Z> {} // error: required parameter following optional

pub type Template<X,Y=int>
  x X
  y Y
  z str

type Bar
  x int

type Partial<T>
  x Template<int,T>

type Default
  x Template<uint/* Y defaults to int */>

pub type Instance
  // a Template<int,uint> // template use
  // b Template<int,uint> // template use
  c Template<int,Template<int,u8>> // template use
  d Partial<u8>

type BarArray [Bar]
type BarSlice &[Bar]
type u8Array [u8]
type u8Slice &[u8]
type BarRef &Bar
type u8ArrayArray [[u8]]

pub "C" fun something(int) int

fun f1(x int) int
  f2(x)

fun f2(x int) int
  if x > 0
    f1(x - 1)
  x

// fun makefoo<T>() Template<T>
fun blah(i Instance) {}

// pub fun main() {
//   // var bar Instance

//   // type Foo { x int }
//   // var Foo w

//   // print("hej")
// }
