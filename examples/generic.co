//import "std/runtime" { print }

// type Bad<X,Y=int,Z> {} // error: required parameter following optional

type Template<X,Y=int>
  x X
  y Y
  //z ?Template<u8,u8>

type Partial<T>
  x Template<int,T>

// type Default
//   x Template<uint/* Y defaults to int */>

type Instance
  // a Template<int,uint> // template use
  // b Template<int,uint> // template use
  c Template<int,Template<int,u8>> // template use
  d Partial<u8>  // <——— cgen ISSUE!

// fun makefoo<T>() Template<T>
// fun blah(i Instance) {}

// pub fun main() {
//   // var bar Instance

//   // type Foo { x int }
//   // var Foo w

//   // print("hej")
// }
