
// pub "c" fun printu64(u64) void

fun hello() {}

fun consume_i16_array(a [i16]) {
  // drop(a)
}

fun arrays_literals(x i32) {
  var _ &[int]    // slice
  var _ mut&[int] // mutable slice
  var _ [i16]     // runtime-dynamic array
  var _ [u32 3]   // fixed-size array

  var _         = [x, 2, 3]   // [i32 3]
  var _ [int 5] = [1, 2, 3]   // [int 5]
  //var _ [int 2] = [1, 2, 3] // error: excess value

  // runtime-dynamic arrays are owned types
  var a [i16]   = [1, 2, 3]   // [i16]
  consume_i16_array(a) // ownership moved to function

  // TODO allow [T N] initializer for dynamic arrays
}

pub "c" fun foo(x, y int) int {
  arrays_literals(i32(x))
  0
}


// type Vec2 {
//   x, y int
// }
// fun mutate(v mut&Vec2, x int) { v.x += x }
// fun read(v &Vec2) int         { v.x }
// fun edit_own_copy(v Vec2)     { v.x = 2 }
// fun filter(a, b Vec2) Vec2    { if b.x > a.x { b } else { a } }

// fun refadd(v &int, d int) int { v + d }
// fun mutadd(v mut&int, d int) { *v = d + v }


/*type Vec2 {
  x, y int
}

fun translate_x(v &Vec2, d int) {
  v.x = v.x + d
}

fun foo(x, y int) int {
  var a = Vec2(x, y)
  translate_x(&a, 3)
  a.x * a.y
}*/


// fun create() *int


// fun ownership_drop_params(x, y *int) void {
// } // drop(y); drop(x)

// fun ownership_drop_param2(x, y *int) *int {
//   x
// } // drop(y)

// fun ownership_drop_var_in_decl_order(x, y *int) {
//   var a *int = y  // a declared before b; must outlive b
//   var b *int = x
//   var c *int = b
// } // drop(c); drop(a) -- not the other way around

// fun ownership_drop_let_in_decl_order(x, y *int) {
//   let a *int = y  // a declared before b; must outlive b
//   let b *int = x
//   let c *int = b
// } // drop(c); drop(a) -- not the other way around

// fun ownership_drop_in_scope(x, y *int) *int {
//   {
//     let a = x    // transfer ownership of value at x to a
//     // let c = x // error: use of dead value
//   }              // drop(a)
//   // let c = x   // error: use of dead value
//   return y       // transfer ownership of y to caller
// }

// fun ownership_dead_until_initialized_nodrop(x *int) *int {
//   var a *int
//   return x       // transfer ownership of x's value to caller
// }                // NO drop(a) since a does not have a value

// fun ownership_dead_until_initialized_drop(x, y *int) *int {
//   var a *int     // uninitialized means no ownership by default
//   {
//     // let b = a // error: use of uninitialized variable
//     a = x        // transfer ownership of x's value to a
//     // let c = x // error: use of dead value
//   }
//   return a       // transfer ownership of a's value to caller
// }                // drop(y)

// fun ownership_error_ret_dead(x *int) *int {
//   var a *int = x // transfer ownership of x's value to a
//   var b = a      // transfer ownership of a's value to b
//   return a       // EXPECT error: use of dead value
// }

// fun ownership_drop_via_block(x, y *int) *int {
//   let a = {
//     let b = x // transfer ownership of x's value to b
//     b         // transfer ownership of b's value to block
//   }           // transfer ownership of block value to a
//   return y    // transfer ownership of y's value to caller
// }             // drop(a)

// fun ownership_drop_ifthen_ret(x, y, z *int) *int {
//   if true {
//     return x // transfer ownership of x to caller
//   }          // drop(z), drop(y)
//   let k = *x // ok since x is alive here
//   return y   // transfer ownership of y to caller
// }            // drop(z), drop(x)

// fun ownership_drop_ifelse_ret(x, y *int) *int {
//   if true {
//   } else {
//     return x // transfer ownership of x to caller
//   }          // drop(y)
//   let k = *x // ok since x is alive here
//   return y   // transfer ownership of y to caller
// }            // drop(x)

// fun ownership_drop_unused_if(x, y *int) *int {
//   if true {} else {}
//   return y // transfer ownership of y to caller
// }          // drop(x)

// fun ownership_drop_ifthen_drop(x, y *int) *int {
//   let k = y
//   if true {
//     let a = x
//   }            // drop(a)
//                // drop(x) in implicit "else" branch
//   // let b = x // error: use of dead value
//   return k     // transfer ownership of y to caller
// }

// fun ownership_drop_ifelse_drop(x, y *int) *int {
//   let k = y
//   if true {    // drop(x)
//   } else {
//     let a = x
//   }            // drop(a)
//   // let a = x // error: use of dead value
//   return k     // transfer ownership of y to caller
// }

// fun ownership_drop_ifthenelse_drop(x, y *int) *int {
//   let k = y
//   if true {
//     let a = x
//   } else {     // drop(a)
//   }            // drop(x)
//   // let a = x // error: use of dead value
//   return k     // transfer ownership of y's value to caller
// }


// fun ownership_drop_call_res_in_ifthen() void {
//   if true {
//     create()
//   }
// }


// fun ownership_drop_inner_ifthen(x *int) *int {
//   if true {
//     let a = create()
//   }        // drop(a)
//   return x // transfer ownership of x's value to caller
// }


// fun ownership_drop_ifthen(x, y *int) *int {
//   if true {
//     let a = y  // transfer ownership of y's value to a
//     let _ = *a // just for demonstration, to make ir interesting
//   }            // drop(a)
//                // drop(y) in implicit "else" branch
//   return x     // transfer ownership of x's value to caller
// }


// fun ownership_drop_one_of(x, y *int) *int {
//   let result = if true {
//     x          // transfer ownership of x's value to "then" block
//   } else {     // drop(y)
//     y          // transfer ownership of y's value to "else" block
//   }            // drop(x)
//   // let a = *x // error: use of dead value
//   // let b = *y // error: use of dead value
//   return result // transfer ownership of if's value to caller
// }


// fun ownership_drop_ifthen_inner(x *int) *int {
//   if true {
//     let a = create()
//     if true {
//       let _ = *a // make the IR easier to read
//       let b = a
//     }            // drop(b); drop(a) in implicit "else" branch
//   }
//   return x       // transfer ownership of if's value to caller
// }


// fun ownership_drop_ifthen_nest(x, y *int) *int {
//   let result = if true {
//     let a = create()
//     let b = create()
//     if true {
//       let a2 = a
//     }           // drop(a2); drop(a) in implicit "else" branch
//     x           // transfer ownership of x's value to "then" block
//   } else {      // drop(b)
//     y           // transfer ownership of y's value to "else" block
//   }             // drop(z)
//   // let a = *x // error: use of dead value
//   // let b = *y // error: use of dead value
//                 // conditionally drop(x) or drop(y)
//   return result // transfer ownership of if's value to caller
// }


// fun ownership_drop_ifthen_nest2(x, y, z *int) *int {
//   let a = if true {
//     if true {
//       let b = z   // transfer ownership of z's value to b
//                   // transfer ownership of b's value to "then" block
//     }             // drop(b)
//                   // drop(z) in implicit "else" branch
//     x             // transfer ownership of x's value to "then" block
//   } else {        // drop(y)
//     y             // transfer ownership of y's value to "else" block
//   }               // drop(z), drop(x)
//   // let a = *x   // error: use of dead value
//   // let b = *y   // error: use of dead value
//                   // transfer ownership of "if" value to a
//   return a        // transfer ownership of b's value to caller
// }


// fun ownership_drop_ifelse_nest(x, y, z *int) *int {
//   let a = if true {
//     let b = if true {
//       x           // transfer ownership of x's value to "then" block
//     } else {      // drop(y)
//       y           // transfer ownership of y's value to "else" block
//     }             // drop(x)
//                   // transfer ownership of "if" value to b
//     // let _ = *x // error: use of dead value
//     // let _ = *y // error: use of dead value
//     b             // transfer ownership of b's value to "then" block
//   } else {
//     let a = *x    // ok; x is alive in this branch
//     y             // transfer ownership of y's value to "else" block
//   }               // drop(x)
//   // let _ = *x   // error: use of dead value
//   // let _ = *y   // error: use of dead value
//                   // transfer ownership of "if" value to a
//   return a        // transfer ownership of a's value to caller
// }                 // drop(z)


// fun optional_ifthen_opt(x ?int, y int) ?int {
//   var a ?int = x
//   if a {
//     a
//   }
// }

// fun optional_ifthen_cont(x ?int, y int) int {
//   var a ?int = x
//   if a {
//     a
//   }
//   0
// }


// fun foo(x MyInt, y i8) int {
//   if y > 0 {
//     x = MyInt(y) + 1
//   }
//   return twice(x)
// }
//
// fun bar(x MyInt, y i8) int {
//   return 0
// }
//
// fun twice(x int) int {
//   x * 2
// }
//
// type MyInt MyInt2
// type MyInt2 int


// trait Drop {
//   fun drop(mut this) void
// }


/*

type Stuff {
  x int
}

type Thing {
  x, y, z u32 = 3, 4, 5
  stuff ?Stuff
}

fun Thing.drop(mut this) {
  printu32(2)
}

fun Stuff.drop(mut this) {
  printu32(3)
}

fun foo(x, y int) int {
  printu32(1)
  let a = Thing(x: u32(x))
  if x > 1 {
    a.stuff = Stuff()
  }
  x * y * int(a.z)
}*/

// pub "C" fun foo(x, y int) int {
//   fun double(x int) int {
//     fun half(x int) int {
//       x / 2
//     }
//     half(x) * 2
//   }
//   double(x)
// }
