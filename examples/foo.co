
// fun owning_var_no_init() {
//   var a *int  // initialized as "dead"
// }

// fun owning_var_err_dead() {
//   var a *int
//   let b *int = a  // error: a is dead
// }

// fun owning_var_err_dead(x *int) {
//   let a *int = x
//   let b *int = x  // error: x is dead
// }


// fun owning_param_drop(x *int) {
//   // drop(x)
// }


// fun ownership_branch(x bool, y *int) *int {
//   if x {
//     let a = y
//     a
//   } else {
//     y
//   }
// }

// syntax:
//   *T means "owner of value of type T"
//   x = y where y is *T transfers ownership to x

fun ownership_branch1(x bool, y *int) *int {
  if x {
    if x {
      // loss of ownership (in this case to a) introduces a shadow of a:
      //   a_shadow = clone(a)
      //   a_shadow.flags |= SHADOW
      //   scope_define("a", a_shadow)
      let a = y
      return a
    }
  }
  y // ok since "if" branch does not flow to this branch
}

fun ownership_branch2(x bool, y *int) *int {
  if x {
    if x {
      let a = y
    }
  }
  y // error: y is dead
}


// fun owning_param_no_drop(x *int) *int {
//   x
// }

// fun owning_var_transfer_ownership(x *int) {
//   let a *int = x
//   // drop(a)
// }

// fun ref_var_err_no_init() {
//   var a &int
// }

// type Account {
//   id int
// }
// fun Account.drop(mut this) void {}
// fun bar(x, y *Account) {
//   var a *Account = x // ownership transfers x -> a
//   var b *Account = y // ownership transfers y -> b
//   a = b // drop(a), ownership transfers b -> a
// }


// fun foo(x, y int, z *int) int {
//   if x > 0 {
//     var a = z
//   }
//   x * y
// }
