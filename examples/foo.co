
// fun owning_var_no_init() {
//   var a *int  // initialized as "dead"
// }

// fun owning_var_err_dead() {
//   var a *int
//   let b *int = a  // error: a is dead
// }

// fun owning_var_err_dead(x *int) {
//   let a *int = x
//   let b *int = x  // error: x is dead
// }


// fun owning_param_drop(x *int) {
//   // drop(x)
// }


// fun ownership_branch(x bool, y *int) *int {
//   if x {
//     let a = y
//     a
//   } else {
//     y
//   }
// }

// syntax:
//   *T means "owner of value of type T"
//   x = y where y is *T transfers ownership to x

// fun ownership_branch_err(x bool, y *int) *int {
//   if x {
//     let a = y
//   }
//   y // error: y is dead
// }

// fun ownership_branch_exits(x bool, y *int) *int {
//   if x {
//     let a = y
//     return a
//   }
//   y
// }

// fun ownership_branch_exits(x bool, y *int, z *int) *int {
//   let b = z
//   let c = b

//   // let b2 = z2
//   if x {
//     let a = y
//     return a
//   }
//   y
// }



// fun ownership_branch_fork(x bool, y *int) *int {
//   let m = 123
//   if x {
//     let a = y
//     a
//   } else {
//     y
//   }
// }



// fun ownership_branch_fork_err(x bool, y *int) *int {
//   if x {
//     let a = y
//     a
//   } else {
//     y
//   }
//   y // error: y is dead
// }

// fun ownership_branch_fork_optional(x ?*int, y *int) *int {
//   if let a = x {
//     y
//   } else if x {
//     x // okay; a=x only causes ownership transfer on success
//   } else {
//     y
//   }
// }


// fun owning_param_no_drop(x *int) *int {
//   x
// }

// fun owning_var_transfer_ownership(x *int) {
//   let a *int = x
//   // drop(a)
// }

// fun ref_var_err_no_init() {
//   var a &int
// }

type Account {
  x, z, id int
}
fun Account.foo(this, x int) int {
  .x + x
}
fun bar(x, y int) int {
  x + y
}
fun foo(x, y int) int {
  x = bar(x, y: 3)
  let a = Account(x, id: y)
  a.id * a.foo(y)
}
// fun bar(x, y *Account) {
//   var a *Account = x // ownership transfers x -> a
//   var b *Account = y // ownership transfers y -> b
//   a = b // drop(a), ownership transfers b -> a
// }


// fun foo(x, y int, z *int) int {
//   ownership_branch_exits(true, z)
//   // if x > 0 {
//   //   var a = z
//   // }
//   x * y
// }
