type Vec { x, y int }

fun maybe_owner() ?*int
fun maybe_int() ?int
fun make_bool() bool

fun var_narrowing1(a ?int)
  // a * 2 // error: optional value may be empty
  a = void
  // a * 2 // error: optional value a is empty
  a = 3
  a * 2 // ok (optional value a is not empty)

fun var_narrowing2(a, b ?int)
  a = b
  // a * 2 // error: optional value may be empty
  a = 3
  a * 2 // ok (optional value a is not empty)

fun var_narrowing_in_branch(a ?int)
  if make_bool()
    a = 3
    a * 2 // ok
  // a * 2 // error: optional value may be empty

fun binop_narrowing(a, b ?int)
  let _ = a && a > 0
  let _ = !a || a > 0
  // let _ = a || a > 0 // error: optional value a is empty
  // let _ = (let b = 3) // error: cannot use binding definition as value

fun if_narrowing(a, b, c ?int)
  // "has value" check in branch condition
  if a { a } else { 0 }
  if a { a * 2 } else { 0 }
  if a && a > 0 { a * 2 } else { 0 }
  if a && b { a * b } else { 0 }
  // if (a && b) || c { a * 2 } else { 0 } // error: type ?int has no '*' operator
  if a && (b || c) { a * 2 } else { 0 } // ok
  // if a || a > 0 { 1 } else { 0 }  // error: optional value a is empty
  if !a || a > 0 { 1 } else { 0 } // ok
  // if !a || a > 0 { a * 2 } else { 0 } // error: type ?int has no '*' operator
  if !(a && b) { 0 } else { a * b }
  // if !(a || b) { 0 } else { a * b } // error: optional value may be empty
  // if !(a && b) { a * 2 } else { a * b } // error: optional value a is empty
  // if a && b { a * b } else { a * 2 } // [else] error: optional value may be empty

fun if_bool_narrowing(a, b ?bool)
  let c = a
  a = void  // makes a "empty"
  if a 1    // branch never taken (compile-time 'false')
  b = false // makes b "not empty"
  if b 1    // branch always taken (compile-time 'true')

fun ifvar_narrowing(a ?int, b ?&Vec, c?*int)
  // "has value" variable definition as branch condition
  if var v = true { v } // regular bool var, not narrowed opt
  if var v = a { 1 } // warning: unused binding v
  if var v = a { v * 2 }
  if var v = b { v.x * 2 }
  if var v = maybe_int() { 1 } // warning: unused binding v
  if var v = maybe_int() { v * 2 }
  // if let v ?int = 1 { 1 } // error: cannot use int as boolean in cond
  // if var v = a { v = maybe_int() } // error: var v has type int, not ?int
  if var v = a { v = 3 } // warning: unused variable written to, not read
  // owning value types
  if var v = c { v * 2 }
  if var v = maybe_owner() { v * 2 }
  if var v = maybe_owner() { 1 }
  if var v = maybe_owner() { v * 2 }

fun ifvar_narrowing_expr(a ?int, b ?&Vec, c?*int)
  let _ = if var v = true { v } else { false }
  let _ = if var v = a { 1 } else { 0 }
  let _ = if var v = a { v * 2 } else { 0 }
  let _ = if var v = b { v.x * 2 } else { 0 }
  let _ = if var v = maybe_int() { v * 2 } else { 0 }
  let _ = if var v = maybe_int() { 1 } else { 0 }
  // owning values
  let _ = if var v = c { v * 2 } else { 0 }
  let _ = if var v = maybe_owner() { v * 2 } else { 0 }
  let _ = if var v = maybe_owner() { 1 } else { 0 }

fun ifvar_narrowing_expr_implicit_else(a ?int, b ?&Vec, c?*int)
  // implicit 'else' branch yields ?typeof(thenbranch)
  let _ = if var v = true { v }
  let _ = if var v = a { 1 }
  let _ = if var v = a { v * 2 }
  let _ = if var v = b { v.x * 2 }
  let _ = if var v = maybe_int() { v * 2 }
  let _ = if var v = maybe_int() { 1 }
  // owning values
  let _ = if var v = c { v * 2 }
  let _ = if var v = maybe_owner() { v * 2 }
  let _ = if var v = maybe_owner() { 1 }

fun explicit_check_narrowing(a, b ?int)
  // explicit "is empty" check
  if a != void { a * 2 } else { 0 }
  if a == void { 0 } else { a * 2 }
  let _ = a != void
  let _ = a == void

fun subscript_narrowing_slice(a ?&[u8])
  if a { a[0] } else { 0 }
  // if !a { 0 } else { a[0] } // TODO
  // if a { 0 } else { a[0] } // error: optional value is empty

fun subscript_narrowing_mutslice(a ?mut&[u8])
  if a { a[0] } else { 0 }
  // if !a { 0 } else { a[0] } // TODO
  // if a { 0 } else { a[0] } // error: optional value is empty

fun subscript_narrowing_dynarray(a ?[u8])
  if a { a[0] } else { 0 }
  // if !a { 0 } else { a[0] } // TODO
  // if a { 0 } else { a[0] } // error: optional value is empty

fun subscript_narrowing_fixarray(a ?[u8 3])
  if a { a[0] } else { 0 }
  // if !a { 0 } else { a[0] } // TODO
  // if a { 0 } else { a[0] } // error: optional value is empty

type Foo
  x, y ?int

fun field_narrowing(a Foo)
  if a.x { a.x++ } else { 0 }
  if a.x { a.x * 2 } else { 0 }
  // if a.x { 0 } else { a.x * 2 } // error: optional field a.x is empty
  if a.x && a.y { a.x * a.y } else { 0 }
  // if a.x || a.y { a.x * a.y } else { 0 } // error: optional value may be empty
  if a.x && a.x > 0 { a.x * 2 } else { 0 }

fun owner_narrowing(a ?*Foo) int
  if let x = a { 1 } else { 0 } // owner dropped in "then" branch
  0

fun if_narrowing_assign(a, b ?int)
  if a { a = b }  // ok
  // if a { a += b }  // error: optional value may be empty
  // if a { a -= b }  // error: optional value may be empty
  // if a { a *= b }  // error: optional value may be empty
  // if a { a /= b }  // error: optional value may be empty
  // if a { a %= b }  // error: optional value may be empty
  // if a { a &= b }  // error: optional value may be empty
  // if a { a |= b }  // error: optional value may be empty
  // if a { a ^= b }  // error: optional value may be empty
  // if a { a <<= b } // error: optional value may be empty
  // if a { a >>= b } // error: optional value may be empty

fun if_narrowing_assign_implicit_deref(a ?int)
  if a
    let x = a     // typeof(val)=?int
    let y int = a // implicit deref

fun double_deref_optintref(x &?int) { if x { x * 2 } }
fun double_deref_optintmutref(x mut&?int) { if x { x * 2 } }
fun double_deref_optintptr(x *?int) { if x { x * 2 } }
fun double_deref_optintmutref_inc(x mut&?int) { if x { x++ } }
fun double_deref_optintptr_inc(x *?int) { if x { x++ } }

// [TODO] exiting "then" branch of "if" has effect on "cont" branch
// fun other_branch(a ?int) int
//   if !a // "then" branch
//     return 0
//   // "cont" branch
//   a // implicit "not then" branch
