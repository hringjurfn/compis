
// ——— TODO ———

fun bug1(x bool, y, z *int) *int {
  if x {
    return y
  } // BUG: z is not dropped in this branch
  z
} // BUG: y is not dropped in this branch

fun bug2(x bool, y *int, z *int) *int {
  let b = z
  if x {
    let a = y
    return a
  } // TODO: b is not dropped in this branch
  y
} // drop(b)


// ——— working ———


fun noop() {}
fun two() int { 2 }
fun borrow(x &int) int { *x }

fun ownership_drop_param(x *int) {
} // drop(x)

fun ownership_drop_unused_var_void(x *int) {
  let c = x
} // drop(c)

fun ownership_drop_unused_var(x *int) int {
  let c = x
  3
} // drop(c)

fun ownership_drop_unused_var_ret(x *int) int {
  let c = x
  return 3
} // drop(c)

fun ownership_drop_unused_var_void_ret(x *int) {
  let c = x
  return
  // return noop()
} // drop(c)

fun ownership_drop_unused_var_void_call(x *int) {
  let c = x
  noop()
} // drop(c)

fun ownership_drop_unused_var_void_call_ret(x *int) {
  let c = x
  return noop()
} // drop(c)

fun ownership_drop_unused_var_call(x *int) int {
  let c = x
  two()
} // drop(c)

fun ownership_drop_unused_var_call_ret(x *int) int {
  let c = x
  return two()
} // drop(c)

fun ownership_drop_var_borrow_call(x *int) int {
  let c = x
  borrow(c)
} // drop(c)

fun ownership_drop_var_borrow_call_ret(x *int) int {
  let c = x
  return borrow(c)
} // drop(c)

fun ownership_drop_block_var(x, y *int) int {
  let c = {
    let a = y
    let b = x // transferred to c
  } // drop(a)
  3
} // drop(c)

fun ownership_drop_block_var_void(x, y *int) {
  let c = {
    let a = y
    let b = x // transferred to c
  } // drop(a)
} // drop(c)

fun ownership_drop_block_var_void_ret(x, y *int) {
  let c = {
    let a = y
    let b = x // transferred to c
  } // drop(a)
  return
} // drop(c)

fun ownership_return_owner(x *int) *int {
  return x
} // no drop

fun ownership_return_owner_with_unreachable(x *int) *int {
  return x
  x // no error (unreachable)
} // no drop

fun ownership_return_owner_var(x *int) *int {
  return let c = x
} // no drop

fun ownership_return_optional_owner_var(x *int) {
  let y ?*int = x
} // drop(y)

fun ownership_return_optional_owner(x *int) ?*int {
  return x
} // no drop

fun ownership_implicit_return_owner(x *int) *int {
  x
} // no drop

fun ownership_transfer_to_call(x *int) {
  ownership_drop_param(x)
} // no drop

fun ownership_ping_pong_call(x *int) {
  ownership_return_owner(x)
} // drop(<return_value>)

fun ownership_ping_pong_optional_call(x *int) {
  ownership_return_optional_owner(x)
} // drop(<return_value>)

fun ownership_branch_fork(x bool, y *int) *int {
  if x {
    let a = y
    a
  } /*no drop*/ else {
    y
  } // no drop
} // no drop

fun ownership_branch_exit(x bool, y *int) *int {
  if x {
    let a = y
    return a
  } // no drop
  y
} // no drop

// fun ownership_branch_err(x bool, y *int) *int {
//   if x {
//     let a = y
//   }
//   y // error: y is dead
// }

// fun ownership_branch_fork_err(x bool, y *int) *int {
//   if x {
//     let a = y
//     a
//   } else {
//     y
//   }
//   y // error: y is dead
// }


// ——————— WIP ————————


// fun owning_var_no_init() {
//   var a *int  // initialized as "dead"
// }

// fun owning_var_err_dead() {
//   var a *int
//   let b *int = a  // error: a is dead
// }

// fun owning_var_err_dead(x *int) {
//   let a *int = x
//   let b *int = x  // error: x is dead
// }


// fun ownership_branch_fork_optional(x ?*int, y *int) *int {
//   if let a = x {
//     y
//   } else if x {
//     x // okay; a=x only causes ownership transfer on success
//   } else {
//     y
//   }
// }


// fun owning_param_no_drop(x *int) *int {
//   x
// }

// fun owning_var_transfer_ownership(x *int) {
//   let a *int = x
//   // drop(a)
// }

// fun ref_var_err_no_init() {
//   var a &int
// }

// type Account {
//   x, z, id int
//   fun foo1(this, x int) int { .x + x }
// }
// fun Account.foo(this, x int) int {
//   .x + x
// }
// fun bar(x, y int) int {
//   x + y
// }
// fun foo(x, y int) int {
//   x = bar(x, y: 3)
//   let a = Account(x, id: y)
//   a.id * a.foo(y)
// }

// fun bar(x, y *Account) {
//   var a *Account = x // ownership transfers x -> a
//   var b *Account = y // ownership transfers y -> b
//   a = b // drop(a), ownership transfers b -> a
// }


// fun foo(x, y int, z *int) int {
//   ownership_branch_exits(true, z)
//   // if x > 0 {
//   //   var a = z
//   // }
//   x * y
// }
